Project: PrecisionApi - Convert Strazh CLI to a JSON-returning API.

Core Task:
Analyze a C# codebase provided as a .zip file and return its graph structure (nodes and edges) as a JSON response.

Key Design Decisions & Plan:
1.  API Endpoint:
    *   Accepts a POST request with a .zip file (`multipart/form-data`).
    *   No explicit solution/project path parameters in the request.
    *   No 'tier' parameter; always analyze in "all" mode.
    *   No credentials or other configurations needed for the API endpoint itself.

2.  Preprocessing (.zip handling & project detection):
    *   Extract the .zip to a temporary unique directory.
    *   Scan this directory to find:
        *   A single .sln file (preferred, first found or shallowest if multiple).
        *   Or, one or more .csproj files (if no .sln).
    *   This determines the input for the analysis engine.

3.  Analysis Engine (largely reused/adapted from Strazh):
    *   Core analysis logic will reside in an `AnalysisService`.
    *   Utilize `Buildalyzer` and `Buildalyzer.Workspaces` to load and analyze projects/solutions.
    *   Utilize `Microsoft.CodeAnalysis` (Roslyn) for semantic and syntactic analysis.
    *   `PrecisionApi.Domain` classes (copied from Strazh): `Node`, `Relationship`, `Triple` and subclasses. `Node` equality based on `Pk`. (Docs: `Documentation/Domain.md`)
    *   `PrecisionApi.Analysis.Extractor` class (copied from Strazh): For detailed code parsing. (Docs: `Documentation/Analysis.md`)
    *   Adapt parts of `Strazh.Analysis.Analyzer` (like `AnalyzeProject`, `GetAnalysisContext`) for the new service.
    *   Deduplicate `Triple` objects using a key like `$"{Triple.NodeA.Pk}_{Triple.Relationship.Type}_{Triple.NodeB.Pk}"` before final JSON transformation.

4.  JSON Output Structure:
    *   Format: `{ "nodes": [], "edges": [] }`
    *   Nodes: `[{ "id": "pk_value", "label": "NodeType", "name": "...", "fullName": "...", ... }]`
    *   Edges: `[{ "source": "nodeA_pk", "target": "nodeB_pk", "type": "RELATIONSHIP_TYPE" }]`

5.  Project Structure (PrecisionApi):
    *   `Controllers/AnalysisController.cs` (created, DI for service set up). (Docs: `Documentation/AnalysisController.md`)
    *   `Services/AnalysisService.cs` (created, file discovery & Roslyn context setup in progress). (Docs: `Documentation/AnalysisService.md`)
    *   `Domain/` (Strazh domain classes copied, namespace `PrecisionApi.Domain`).
    *   `Analysis/` (Strazh Extractor copied, namespace `PrecisionApi.Analysis`).
    *   `Documentation/` (contains `AnalysisController.md`, `AnalysisService.md`, `Domain.md`, `Analysis.md`).

6.  NuGet Packages for PrecisionApi (added to .csproj, `dotnet restore` done):
    *   `Buildalyzer`
    *   `Buildalyzer.Workspaces`
    *   `Microsoft.CodeAnalysis.CSharp.Workspaces`

Next Major Phase: Implement `AnalysisService` Core Logic (In Progress):
1.  Copy Strazh Domain & Extractor classes (Done, namespaces adjusted, robustness enhanced).
2.  Implement project/solution file discovery in `AnalysisService` (Done).
3.  Initialize `AnalyzerManager` & Adapt `GetRoslynAnalysisContext` (Done).
4.  Adapt Strazh.Analysis.Analyzer's project iteration & analysis logic into `AnalysisService` (using copied Extractor) to collect Triples (Next).
5.  Implement Triple deduplication.
6.  Implement JSON transformation of Triples to the nodes/edges structure.
7.  Implement robust error handling and logging in `AnalysisService`.
8.  Address temporary directory cleanup in `AnalysisController` for production. 